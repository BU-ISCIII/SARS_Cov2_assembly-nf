/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  homePage = 'https://github.com/BU-ISCIII/SARS_Cov2_assembly-nf'
  description = 'This is a project for SARS-Cov2 Illumina SISPA analysis'
  mainScript = 'main.nf'
}

// Global default params, used in configs
params {
  ver = '1.0' //Pipeline version
  nf_required_version = '0.27.6' //Minimum version of Nextflow required

  reads="$baseDir/data/samples/*.fastq.gz"
  outdir='results'

}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }

  docker {
    includeConfig 'conf/docker.config'
  }

  singularity {
  	includeConfig 'conf/singularity.config'
  }

  hpc_isciii {
    includeConfig 'conf/base.config'
    includeConfig 'conf/hpc_isciii.conf'
  }

  local {
    includeConfig 'conf/base.config'
    includeConfig 'conf/local.conf'
  }

  testing {
  	// TODO
  }

  aws {
  	// TO DO
  }

  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// By default output execution reports
timeline {
  enabled = true
  file = "${params.outdir}/timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/DAG.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
	if(type == 'memory'){
		try {
			if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
				return params.max_memory as nextflow.util.MemoryUnit
			else
				return obj
		} catch (all) {
			println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
			return obj
		}
	} else if(type == 'time'){
		try {
			if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
				return params.max_time as nextflow.util.Duration
			else
				return obj
		} catch (all) {
			println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
			return obj
		}
	} else if(type == 'cpus'){
		try {
			return Math.min( obj, params.max_cpus as int )
		} catch (all) {
			println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
			return obj
		}
	}
}
